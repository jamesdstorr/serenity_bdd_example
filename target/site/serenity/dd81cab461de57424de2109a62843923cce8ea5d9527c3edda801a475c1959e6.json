{"name":"Should be able to retrieve a joke with the Chuck Norris provider","id":"[engine:junit-jupiter]/[class:com.jamesstorr.jokes_service.acceptancetests.WhenRequestingAJoke]/[method:requesting_a_joke_with_chucknorris_provider()]","scenarioId":"[engine:junit-jupiter]/[class:com.jamesstorr.jokes_service.acceptancetests.WhenRequestingAJoke]","testCaseName":"com.jamesstorr.jokes_service.acceptancetests.WhenRequestingAJoke","methodName":"requesting_a_joke_with_chucknorris_provider","testSteps":[{"number":1,"description":"GET http://localhost:8080/api/jokes?provider\u003dchuckNorrisJoke","duration":1,"startTime":"2024-09-23T14:56:37.574336+01:00[Europe/London]","exception":{"errorType":"java.lang.IllegalStateException","message":"Expected response body to be verified as JSON, HTML or XML but no content-type was defined in the response.\nTry registering a default parser using:\n   RestAssured.defaultParser(\u003cparser type\u003e);\nContent was:\n\n","stackTrace":[{"declaringClass":"io.restassured.assertion.StreamVerifier","methodName":"newAssertion","fileName":"StreamVerifier.groovy","lineNumber":43},{"declaringClass":"io.restassured.internal.assertion.BodyMatcher","methodName":"validate","fileName":"BodyMatcher.java","lineNumber":93},{"declaringClass":"io.restassured.internal.assertion.BodyMatcherGroup","methodName":"lambda$validate$0","fileName":"BodyMatcherGroup.java","lineNumber":30},{"declaringClass":"io.restassured.internal.assertion.BodyMatcherGroup","methodName":"validate","fileName":"BodyMatcherGroup.java","lineNumber":30},{"declaringClass":"io.restassured.internal.ResponseSpecificationImpl","methodName":"validateResponseIfRequired","fileName":"ResponseSpecificationImpl.groovy","lineNumber":696},{"declaringClass":"io.restassured.internal.ResponseSpecificationImpl","methodName":"this$2$validateResponseIfRequired","fileName":"ResponseSpecificationImpl.groovy","lineNumber":-1},{"declaringClass":"io.restassured.internal.ResponseSpecificationImpl","methodName":"body","fileName":"ResponseSpecificationImpl.groovy","lineNumber":270},{"declaringClass":"io.restassured.internal.ResponseSpecificationImpl","methodName":"body","fileName":"ResponseSpecificationImpl.groovy","lineNumber":117},{"declaringClass":"io.restassured.internal.ValidatableResponseOptionsImpl","methodName":"body","fileName":"ValidatableResponseOptionsImpl.java","lineNumber":244},{"declaringClass":"com.jamesstorr.jokes_service.actions.JokeApiActions","methodName":"thenIShouldReceiveAChuckNorrisJoke","fileName":"JokeApiActions.java","lineNumber":68},{"declaringClass":"com.jamesstorr.jokes_service.acceptancetests.WhenRequestingAJoke","methodName":"requesting_a_joke_with_chucknorris_provider","fileName":"WhenRequestingAJoke.java","lineNumber":77}]},"result":"ERROR","restQuery":{"method":"GET","path":"http://localhost:8080/api/jokes?provider\u003dchuckNorrisJoke","content":"","contentType":"null","requestHeaders":"Accept\u003d*/*","requestCookies":"","responseHeaders":"Content-Length: 0\nDate: Mon, 23 Sep 2024 13:56:37 GMT\nKeep-Alive: timeout\u003d60\nConnection: keep-alive","responseCookies":"","statusCode":200},"precondition":false,"level":0}],"userStory":{"id":"com.jamesstorr.jokes_service.acceptancetests.WhenRequestingAJoke","storyName":"WhenRequestingAJoke","displayName":"WhenRequestingAJoke","storyClassName":"com.jamesstorr.jokes_service.acceptancetests.WhenRequestingAJoke","path":"jokes_service.acceptancetests.WhenRequestingAJoke","pathElements":[{"name":"jokes_service","description":"jokes_service"},{"name":"acceptancetests","description":"acceptancetests"},{"name":"WhenRequestingAJoke","description":"WhenRequestingAJoke"}],"narrative":"","type":"feature"},"title":"Should be able to retrieve a joke with the Chuck Norris provider","tags":[{"name":"jokes_service/acceptancetests/WhenRequestingAJoke","type":"feature","displayName":"When requesting a joke"},{"name":"jokes_service","type":"capability","displayName":"Jokes service"},{"name":"jokes_service/acceptancetests","type":"feature","displayName":"Acceptancetests"}],"startTime":"2024-09-23T14:56:37.564986+01:00[Europe/London]","endTime":"2024-09-23T14:56:37.579817+01:00[Europe/London]","duration":9,"testFailureCause":{"errorType":"java.lang.IllegalStateException","message":"Expected response body to be verified as JSON, HTML or XML but no content-type was defined in the response.\nTry registering a default parser using:\n   RestAssured.defaultParser(\u003cparser type\u003e);\nContent was:\n\n","stackTrace":[{"declaringClass":"io.restassured.assertion.StreamVerifier","methodName":"newAssertion","fileName":"StreamVerifier.groovy","lineNumber":43},{"declaringClass":"io.restassured.internal.assertion.BodyMatcher","methodName":"validate","fileName":"BodyMatcher.java","lineNumber":93},{"declaringClass":"io.restassured.internal.assertion.BodyMatcherGroup","methodName":"lambda$validate$0","fileName":"BodyMatcherGroup.java","lineNumber":30},{"declaringClass":"io.restassured.internal.assertion.BodyMatcherGroup","methodName":"validate","fileName":"BodyMatcherGroup.java","lineNumber":30},{"declaringClass":"io.restassured.internal.ResponseSpecificationImpl","methodName":"validateResponseIfRequired","fileName":"ResponseSpecificationImpl.groovy","lineNumber":696},{"declaringClass":"io.restassured.internal.ResponseSpecificationImpl","methodName":"this$2$validateResponseIfRequired","fileName":"ResponseSpecificationImpl.groovy","lineNumber":-1},{"declaringClass":"io.restassured.internal.ResponseSpecificationImpl","methodName":"body","fileName":"ResponseSpecificationImpl.groovy","lineNumber":270},{"declaringClass":"io.restassured.internal.ResponseSpecificationImpl","methodName":"body","fileName":"ResponseSpecificationImpl.groovy","lineNumber":117},{"declaringClass":"io.restassured.internal.ValidatableResponseOptionsImpl","methodName":"body","fileName":"ValidatableResponseOptionsImpl.java","lineNumber":244},{"declaringClass":"com.jamesstorr.jokes_service.actions.JokeApiActions","methodName":"thenIShouldReceiveAChuckNorrisJoke","fileName":"JokeApiActions.java","lineNumber":68},{"declaringClass":"com.jamesstorr.jokes_service.acceptancetests.WhenRequestingAJoke","methodName":"requesting_a_joke_with_chucknorris_provider","fileName":"WhenRequestingAJoke.java","lineNumber":77}]},"testFailureClassname":"java.lang.IllegalStateException","testFailureMessage":"Expected response body to be verified as JSON, HTML or XML but no content-type was defined in the response.\nTry registering a default parser using:\n   RestAssured.defaultParser(\u003cparser type\u003e);\nContent was:\n\n","testFailureSummary":"ERROR;java.lang.IllegalStateException;Expected response body to be verified as JSON, HTML or XML but no content-type was defined in the response.\nTry registering a default parser using:\n   RestAssured.defaultParser(\u003cparser type\u003e);\nContent was:\n\n;StreamVerifier.groovy","projectKey":"","annotatedResult":"ERROR","driver":"","isManualTestingUpToDate":false,"manual":false,"testSource":"JUnit5","order":0,"result":"ERROR"}